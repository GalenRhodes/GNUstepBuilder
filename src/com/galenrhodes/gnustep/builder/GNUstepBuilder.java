package com.galenrhodes.gnustep.builder;

import com.galenrhodes.gnustep.Main;
import com.galenrhodes.gnustep.common.Tools;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedHashSet;
import java.util.ResourceBundle;
import java.util.Set;

public class GNUstepBuilder {

    private final JPanel                     _sync;
    private final Set<ButtonPressedListener> buttonPressedListeners = new LinkedHashSet<>();
    private       boolean                    cancelButtonEnabledState;
    private       boolean                    okButtonEnabledState;
    private       JButton                    cancelButton;
    private       JButton                    okButton;
    private       JLabel                     statusLabel;
    private       JPanel                     builderStatus;
    private       JProgressBar               progressBar;
    private       JTextArea                  buildLogDisplay;
    private       BuilderButton              pushedButton;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public GNUstepBuilder() {
        super();
        _sync = builderStatus;
        pushedButton = BuilderButton.NONE;
        okButtonEnabledState = false;
        cancelButtonEnabledState = true;

        ActionListener actionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(e.getSource() == okButton) {
                    handlePressedButton(BuilderButton.OK);
                }
                else if(e.getSource() == cancelButton) {
                    handlePressedButton(BuilderButton.CANCEL);
                }
            }
        };

        okButton.addActionListener(actionListener);
        cancelButton.addActionListener(actionListener);
        okButton.setEnabled(okButtonEnabledState);
        cancelButton.setEnabled(cancelButtonEnabledState);
    }

    /**
     *
     */
    public JComponent $$$getRootComponent$$$() { return builderStatus; }

    public void addButtonPressedListener(ButtonPressedListener listener) {
        if(listener != null) buttonPressedListeners.add(listener);
    }

    public void addStatusText(String txt) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() { buildLogDisplay.append(txt); }
        });
    }

    public void addToFrame(JFrame frame) {
        frame.getContentPane().add(builderStatus);
    }

    public void removeButtonPressedListener(ButtonPressedListener listener) {
        if(listener != null) buttonPressedListeners.remove(listener);
    }

    public void setCancelButtonEnabledState(boolean state) {
        cancelButtonEnabledState = state;
        if(cancelButtonEnabledState) okButtonEnabledState = false;
        updateButtonStates();
    }

    public void setOkButtonEnabledState(boolean state) {
        okButtonEnabledState = state;
        if(okButtonEnabledState) cancelButtonEnabledState = false;
        updateButtonStates();
    }

    public void setProgress(int percent) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() { progressBar.setValue((percent < 0) ? 0 : ((percent > 100) ? 100 : percent)); }
        });
    }

    public void setStatusLabelText(String text) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() { statusLabel.setText(text); }
        });
    }

    public BuilderButton waitForAnyButton() throws InterruptedException {
        synchronized(_sync) {
            while(pushedButton == BuilderButton.NONE) _sync.wait();
            BuilderButton button = pushedButton;
            pushedButton = BuilderButton.NONE;
            _sync.notify();
            return button;
        }
    }

    /**
     *
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if(currentFont == null) return null;
        String resultName;
        if(fontName == null) {resultName = currentFont.getName();}
        else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if(testFont.canDisplay('a') && testFont.canDisplay('1')) {resultName = fontName;}
            else {resultName = currentFont.getName();}
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     *
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result        = new StringBuffer();
        boolean      haveMnemonic  = false;
        char         mnemonic      = '\0';
        int          mnemonicIndex = -1;
        for(int i = 0; i < text.length(); i++) {
            if(text.charAt(i) == '&') {
                i++;
                if(i == text.length()) break;
                if(!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if(haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     *
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result        = new StringBuffer();
        boolean      haveMnemonic  = false;
        char         mnemonic      = '\0';
        int          mnemonicIndex = -1;
        for(int i = 0; i < text.length(); i++) {
            if(text.charAt(i) == '&') {
                i++;
                if(i == text.length()) break;
                if(!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if(haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR call it in your code!
     */
    private void $$$setupUI$$$() {
        builderStatus = new JPanel();
        builderStatus.setLayout(new GridLayoutManager(5, 2, new Insets(5, 5, 5, 5), -1, -1));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("com/galenrhodes/gnustep/localization").getString("builder.label.status"));
        builderStatus.add(label1,
                          new GridConstraints(0,
                                              0,
                                              1,
                                              1,
                                              GridConstraints.ANCHOR_WEST,
                                              GridConstraints.FILL_NONE,
                                              GridConstraints.SIZEPOLICY_FIXED,
                                              GridConstraints.SIZEPOLICY_FIXED,
                                              null,
                                              new Dimension(44, 14),
                                              null,
                                              0,
                                              false));
        final Spacer spacer1 = new Spacer();
        builderStatus.add(spacer1,
                          new GridConstraints(2,
                                              1,
                                              1,
                                              1,
                                              GridConstraints.ANCHOR_CENTER,
                                              GridConstraints.FILL_HORIZONTAL,
                                              GridConstraints.SIZEPOLICY_WANT_GROW,
                                              1,
                                              null,
                                              null,
                                              null,
                                              0,
                                              false));
        statusLabel = new JLabel();
        this.$$$loadLabelText$$$(statusLabel, ResourceBundle.getBundle("com/galenrhodes/gnustep/localization").getString("builder.label.actualStatus"));
        builderStatus.add(statusLabel,
                          new GridConstraints(0,
                                              1,
                                              1,
                                              1,
                                              GridConstraints.ANCHOR_WEST,
                                              GridConstraints.FILL_NONE,
                                              GridConstraints.SIZEPOLICY_WANT_GROW,
                                              GridConstraints.SIZEPOLICY_FIXED,
                                              null,
                                              null,
                                              null,
                                              0,
                                              false));
        buildLogDisplay = new JTextArea();
        buildLogDisplay.setColumns(0);
        buildLogDisplay.setEditable(false);
        Font buildLogDisplayFont = this.$$$getFont$$$("Courier New", Font.PLAIN, 10, buildLogDisplay.getFont());
        if(buildLogDisplayFont != null) buildLogDisplay.setFont(buildLogDisplayFont);
        buildLogDisplay.setRows(0);
        buildLogDisplay.setTabSize(4);
        buildLogDisplay.setWrapStyleWord(false);
        builderStatus.add(buildLogDisplay,
                          new GridConstraints(3,
                                              1,
                                              1,
                                              1,
                                              GridConstraints.ANCHOR_CENTER,
                                              GridConstraints.FILL_BOTH,
                                              GridConstraints.SIZEPOLICY_WANT_GROW,
                                              GridConstraints.SIZEPOLICY_WANT_GROW,
                                              null,
                                              new Dimension(150, 50),
                                              null,
                                              0,
                                              false));
        final Spacer spacer2 = new Spacer();
        builderStatus.add(spacer2,
                          new GridConstraints(3,
                                              0,
                                              1,
                                              1,
                                              GridConstraints.ANCHOR_CENTER,
                                              GridConstraints.FILL_VERTICAL,
                                              1,
                                              GridConstraints.SIZEPOLICY_WANT_GROW,
                                              null,
                                              null,
                                              null,
                                              0,
                                              false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        builderStatus.add(panel1,
                          new GridConstraints(4,
                                              0,
                                              1,
                                              2,
                                              GridConstraints.ANCHOR_CENTER,
                                              GridConstraints.FILL_BOTH,
                                              GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                              GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                              null,
                                              null,
                                              null,
                                              0,
                                              false));
        okButton = new JButton();
        okButton.setEnabled(false);
        this.$$$loadButtonText$$$(okButton, ResourceBundle.getBundle("com/galenrhodes/gnustep/localization").getString("builder.button.ok.label"));
        okButton.setToolTipText(ResourceBundle.getBundle("com/galenrhodes/gnustep/localization").getString("builder.button.ok.tooltip"));
        panel1.add(okButton);
        cancelButton = new JButton();
        this.$$$loadButtonText$$$(cancelButton, ResourceBundle.getBundle("com/galenrhodes/gnustep/localization").getString("builder.button.cancel.label"));
        cancelButton.setToolTipText(ResourceBundle.getBundle("com/galenrhodes/gnustep/localization").getString("builder.button.cancel.tooltip"));
        panel1.add(cancelButton);
        progressBar = new JProgressBar();
        progressBar.setStringPainted(true);
        progressBar.setValue(50);
        builderStatus.add(progressBar,
                          new GridConstraints(1,
                                              1,
                                              1,
                                              1,
                                              GridConstraints.ANCHOR_CENTER,
                                              GridConstraints.FILL_HORIZONTAL,
                                              GridConstraints.SIZEPOLICY_WANT_GROW,
                                              GridConstraints.SIZEPOLICY_FIXED,
                                              null,
                                              null,
                                              null,
                                              0,
                                              false));
    }

    private void handlePressedButton(BuilderButton button) {
        okButton.setEnabled(okButtonEnabledState = false);
        cancelButton.setEnabled(cancelButtonEnabledState = false);
        setPushedButton(button);
        Main.getInstance().getExecutor().submit(new Runnable() {
            @Override
            public void run() {
                for(ButtonPressedListener listener : buttonPressedListeners) {
                    try { listener.buttonPressed(button); } catch(Exception ignored) {}
                }
            }
        });
    }

    private void setPushedButton(BuilderButton button) {
        synchronized(_sync) {
            pushedButton = button;
            _sync.notify();
        }
    }

    private void updateButtonStates() {
        Tools.invokeAndWait(new Runnable() {
            @Override
            public void run() {
                okButton.setEnabled(okButtonEnabledState);
                cancelButton.setEnabled(cancelButtonEnabledState);
            }
        });
        setPushedButton(BuilderButton.NONE);
    }

}
