package com.galenrhodes.gnustep;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class GNUstepBuilder {

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    private boolean      cancelButtonEnabledState;
    private boolean      cancelPushed;
    private boolean      okButtonEnabledState;
    private boolean      okPushed;
    private JButton      cancelButton;
    private JButton      okButton;
    private JLabel       statusLabel;
    private JPanel       builderStatus;
    private JProgressBar progressBar;
    private JTextArea    buildLogDisplay;

    /**
     *
     */
    public JComponent $$$getRootComponent$$$() { return builderStatus; }

    public JButton getCancelButton() { return cancelButton; }

    public GNUstepBuilder() {
        super();
        okPushed = false;
        cancelPushed = false;
        okButtonEnabledState = false;
        cancelButtonEnabledState = true;

        ActionListener actionListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(e.getSource() == okButton) {
                    okButton.setEnabled(false);
                    cancelButton.setEnabled(false);

                    synchronized(Main.getInstance()) {
                        okPushed = true;
                        Main.getInstance().notify();
                    }
                }
                else if(e.getSource() == cancelButton) {
                    okButton.setEnabled(false);
                    cancelButton.setEnabled(false);

                    synchronized(Main.getInstance()) {
                        cancelPushed = true;
                        Main.getInstance().notify();
                    }
                }
            }
        };

        okButton.addActionListener(actionListener);
        cancelButton.addActionListener(actionListener);
        okButton.setEnabled(okButtonEnabledState);
        cancelButton.setEnabled(cancelButtonEnabledState);
    }

    public void addStatusText(String txt) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                buildLogDisplay.append(txt);
            }
        });
    }

    public void enableOkButton() {
        synchronized(Main.getInstance()) {
            okButtonEnabledState = true;
            cancelButtonEnabledState = false;
            okButton.setEnabled(okButtonEnabledState);
            cancelButton.setEnabled(cancelButtonEnabledState);
            okPushed = cancelPushed = true;
            Main.getInstance().notify();
        }
    }

    public JPanel getBuilderStatus() {
        return builderStatus;
    }

    public boolean isCancelPushed() {
        synchronized(Main.getInstance()) {
            return cancelPushed;
        }
    }

    public boolean isOkPushed() {
        synchronized(Main.getInstance()) {
            return okPushed;
        }
    }

    public void resetButtons() throws Exception {
        SwingUtilities.invokeAndWait(new Runnable() {
            @Override
            public void run() {
                _resetButtons();
                okButton.setEnabled(okButtonEnabledState);
                cancelButton.setEnabled(cancelButtonEnabledState);
            }
        });
    }

    public void setProgress(int percent) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                progressBar.setValue((percent < 0) ? 0 : ((percent > 100) ? 100 : percent));
            }
        });
    }

    public void setStatusLabelText(String text) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                statusLabel.setText(text);
            }
        });
    }

    public JButton getOkButton() { return okButton; }

    public BuilderButton waitForEitherButton() {
        BuilderButton button;

        synchronized(Main.getInstance()) {
            while(!(okPushed || cancelPushed)) {
                try { Main.getInstance().wait(); } catch(Exception ignored) {}
            }

            // The inspection is wrong.
            //noinspection ConstantConditions
            button = (okPushed ? BuilderButton.OK : (cancelPushed ? BuilderButton.CANCEL : BuilderButton.NONE));
        }

        _resetButtons();
        return button;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR call it in your code!
     */
    private void $$$setupUI$$$() {
        builderStatus = new JPanel();
        builderStatus.setLayout(new GridLayoutManager(5, 2, new Insets(5, 5, 5, 5), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Status:");
        builderStatus.add(label1,
                          new GridConstraints(0,
                                              0,
                                              1,
                                              1,
                                              GridConstraints.ANCHOR_WEST,
                                              GridConstraints.FILL_NONE,
                                              GridConstraints.SIZEPOLICY_FIXED,
                                              GridConstraints.SIZEPOLICY_FIXED,
                                              null,
                                              new Dimension(44, 14),
                                              null,
                                              0,
                                              false));
        final Spacer spacer1 = new Spacer();
        builderStatus.add(spacer1,
                          new GridConstraints(2,
                                              1,
                                              1,
                                              1,
                                              GridConstraints.ANCHOR_CENTER,
                                              GridConstraints.FILL_HORIZONTAL,
                                              GridConstraints.SIZEPOLICY_WANT_GROW,
                                              1,
                                              null,
                                              null,
                                              null,
                                              0,
                                              false));
        statusLabel = new JLabel();
        statusLabel.setText("Now is the time for all good men to come to the aid of their countr.");
        builderStatus.add(statusLabel,
                          new GridConstraints(0,
                                              1,
                                              1,
                                              1,
                                              GridConstraints.ANCHOR_WEST,
                                              GridConstraints.FILL_NONE,
                                              GridConstraints.SIZEPOLICY_WANT_GROW,
                                              GridConstraints.SIZEPOLICY_FIXED,
                                              null,
                                              null,
                                              null,
                                              0,
                                              false));
        buildLogDisplay = new JTextArea();
        buildLogDisplay.setColumns(0);
        buildLogDisplay.setEditable(false);
        Font buildLogDisplayFont = this.$$$getFont$$$("Courier New", Font.PLAIN, 10, buildLogDisplay.getFont());
        if(buildLogDisplayFont != null) buildLogDisplay.setFont(buildLogDisplayFont);
        buildLogDisplay.setRows(0);
        buildLogDisplay.setTabSize(4);
        buildLogDisplay.setWrapStyleWord(false);
        builderStatus.add(buildLogDisplay,
                          new GridConstraints(3,
                                              1,
                                              1,
                                              1,
                                              GridConstraints.ANCHOR_CENTER,
                                              GridConstraints.FILL_BOTH,
                                              GridConstraints.SIZEPOLICY_WANT_GROW,
                                              GridConstraints.SIZEPOLICY_WANT_GROW,
                                              null,
                                              new Dimension(150, 50),
                                              null,
                                              0,
                                              false));
        final Spacer spacer2 = new Spacer();
        builderStatus.add(spacer2,
                          new GridConstraints(3,
                                              0,
                                              1,
                                              1,
                                              GridConstraints.ANCHOR_CENTER,
                                              GridConstraints.FILL_VERTICAL,
                                              1,
                                              GridConstraints.SIZEPOLICY_WANT_GROW,
                                              null,
                                              null,
                                              null,
                                              0,
                                              false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        builderStatus.add(panel1,
                          new GridConstraints(4,
                                              0,
                                              1,
                                              2,
                                              GridConstraints.ANCHOR_CENTER,
                                              GridConstraints.FILL_BOTH,
                                              GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                              GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                              null,
                                              null,
                                              null,
                                              0,
                                              false));
        okButton = new JButton();
        okButton.setEnabled(false);
        okButton.setText("OK");
        panel1.add(okButton);
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        panel1.add(cancelButton);
        progressBar = new JProgressBar();
        progressBar.setStringPainted(true);
        progressBar.setValue(50);
        builderStatus.add(progressBar,
                          new GridConstraints(1,
                                              1,
                                              1,
                                              1,
                                              GridConstraints.ANCHOR_CENTER,
                                              GridConstraints.FILL_HORIZONTAL,
                                              GridConstraints.SIZEPOLICY_WANT_GROW,
                                              GridConstraints.SIZEPOLICY_FIXED,
                                              null,
                                              null,
                                              null,
                                              0,
                                              false));
    }

    /**
     *
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if(currentFont == null) return null;
        String resultName;
        if(fontName == null) {resultName = currentFont.getName();}
        else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if(testFont.canDisplay('a') && testFont.canDisplay('1')) {resultName = fontName;}
            else {resultName = currentFont.getName();}
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    public enum BuilderButton {
        NONE, OK, CANCEL
    }

    private void _resetButtons() {
        synchronized(Main.getInstance()) {
            okPushed = false;
            cancelPushed = false;
            Main.getInstance().notify();
        }
    }

}
